#include <iostream>
#include <string>
#include <fstream>

#define ATTN_B 1
#define ATTN_N 16
#define ATTN_D 32

#define CudaCheckError()    __cudaCheckError( __FILE__, __LINE__ )
inline void __cudaCheckError( const char *file, const int line ) {
    cudaError err = cudaGetLastError();
    if ( cudaSuccess != err ) {
        fprintf( stderr, "cudaCheckError() failed at %s:%i : %s\n", file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
    err = cudaDeviceSynchronize();
    if( cudaSuccess != err ) {
        fprintf( stderr, "cudaCheckError() with sync failed at %s:%i : %s\n", file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
}

int main(int argc, char **argv) {
    // create dummy variables that are the right size
    constexpr int TOTAL_ELEMENTS_X = ATTN_B*ATTN_N*ATTN_D;
    constexpr int TOTAL_ELEMENTS_O = ATTN_B*ATTN_N*ATTN_N;
    float *x     = new float[TOTAL_ELEMENTS_X];
    float *o     = new float[TOTAL_ELEMENTS_O];
    float *o_ref = new float[TOTAL_ELEMENTS_O];
    bf16 *x_bf     = new bf16[TOTAL_ELEMENTS_X];

    if(argc > 1) {
        std::ifstream infile(argv[1]);
        for(int i = 0; i < TOTAL_ELEMENTS_X; i++) {   infile >> x[i];    }
        for(int i = 0; i < TOTAL_ELEMENTS_O; i++) {   infile >> o_ref[i];  }
        std::cout << "Finished loading file from " << argv[1] << "!" << std::endl;
    }

    for(int i = 0; i < TOTAL_ELEMENTS_X; i++) {
        x_bf[i] = __float2bfloat16(x[i]);
    }

    // set the inputs
    bf16 *d_x;
    float *d_o;
    cudaMalloc(&d_x, TOTAL_ELEMENTS_X * sizeof(bf16));
    cudaMalloc(&d_o, TOTAL_ELEMENTS_O * sizeof(float));
    cudaMemcpy(d_x, x_bf, TOTAL_ELEMENTS_X * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_o, o, TOTAL_ELEMENTS_O * sizeof(float), cudaMemcpyHostToDevice);

    std::cout << "Starting kernel\n";
    cudaDeviceSynchronize();
    CudaCheckError();
    dispatch_micro( d_x, d_o ); 
    cudaDeviceSynchronize();
    CudaCheckError();
    std::cout << "Finished kernel\n";
    
    // check correctness
    cudaMemcpy(o, d_o, TOTAL_ELEMENTS_O * sizeof(float), cudaMemcpyDeviceToHost);
    bool good = true;
    std::ofstream o_ref_file("printouts/o_ref.txt");
    std::ofstream o_file("printouts/o.txt");
    std::ofstream diff_file("printouts/diff.txt");
    std::cout << "Total elements: " << TOTAL_ELEMENTS_O << std::endl;
    for(int i = 0; i < TOTAL_ELEMENTS_O; i++) {
        float diff = o[i] - o_ref[i];
        if(i < TOTAL_ELEMENTS_O) {
            o_ref_file << o_ref[i] << ' ';
            o_file << o[i] << ' ';
            diff_file << diff << ' ';
            if (i % 16 == 15) {
                o_ref_file << std::endl;
                o_file << std::endl;
                diff_file << std::endl;
            }
        }
        if(abs(diff) > 0.1 || isnan(diff)) {
            if (good == true) { 
                printf("i: %d, pred: %f, ref: %f, diff: %f\n", i, o[i], o_ref[i], diff);
            }
            good = false;
        }
    }
    if(good) std::cout << "Correct out :)\n";
    else std::cout << "Incorrect out :(\n";

    cudaFree(d_x);
    cudaFree(d_o);
    delete[] x, o, o_ref;
    return 0;
}
